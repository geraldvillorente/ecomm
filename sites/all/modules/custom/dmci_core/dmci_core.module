<?php
/**
 * @file
 * dmci_core.module
 */

/**
 * Implements hook_menu()
 */

function dmci_core_menu() {
  $items = array();
  $items['update-reservation'] = array(
    'title' => 'Update Reservation',
    'description' => 'Update reservation',
    'page callback' => 'dmci_core_update_reservation',
    'page arguments' => array('1'),
    'access arguments' => array('administer content'),
  );

  $items['data/get-updates'] = array(
    'title' => 'Get Updates',
    'description' => 'Get the latest updates',
    'page callback' => 'dmci_core_get_updates',
    'page arguments' => array('1'),
    'access arguments' => array('administer content'),
  );

  return $items;
}

function dmci_core_menu_alter(&$items) {
  $items['node']['access callback'] = FALSE;
  $items['reservation']['access arguments'] = array('allow reservation');
}

function dmci_core_permission() {
  return array(
    'allow reservation' => array(
      'title' => t('Allow reservation'),
      'description' => t('Allow user to use reservation.'),
    ),
  );
}

/**
 * Implements hook_user_login().
 */
function dmci_core_user_login(&$edit, $account) {
  $edit['redirect'] = "node/1";
}


/**
 * Implements hook_form_alter().
 */
function dmci_form_user_login_alter(&$form, &$form_state, $form_id) {
  $allowed_type = array('textfield', 'password');
  foreach($form as $key => $field) {

    if (@in_array($field['#type'], $allowed_type)) {
      $form[$key]['#attributes']['placeholder'] = $form[$key]['#title'];
      $form[$key]['#title'] = "";
      $form[$key]['#required'] = FALSE;
    }
  }
}


/**
 * Helper function to get the node title.
 */
function drupal_get_node_title($nid) {
  $node = node_load($nid);
  return $node->title;
}


/**
 * Get the node id.
 */
function is_node() {
  $page_node = menu_get_object();
  if (isset($page_node->nid)) {
    return $page_node->nid;
  }
}


/**
 * Helper function to get the Taxonomy vid.
 */
function drupal_get_taxonomy_vid($name, $machine_name) {
  $vid = db_select('taxonomy_vocabulary', 'tv')
    ->fields('tv', array('vid'))
    ->condition('name', $name, '=')
    ->condition('machine_name', $machine_name, '=')
    ->execute()
    ->fetchField();
  return $vid;
}


/**
 * Return node id's on nodequeue.
 */
function drupal_load_nodequeue_nids($qid) {
  $nodequeue_object = nodequeue_load_nodes($sqid);
  return $nodequeue_object;
}


/**
 * Latest on Twitter block (embedded code from twitter).
 */
function _dmci_core_latest_on_twitter() {
  $string = '<p>Sharing what the developers say on Twitter</p>';
  $string .= '<a class="twitter-timeline" href="https://twitter.com/search?q=from%3Agamecrate" data-widget-id="533828898111234048" data-chrome="nofooter noheader" data-tweet-limit="2">Tweets about from:gamecrate</a><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>';
  return $string;
}

/**
 * Update the reservation.
 */
function dmci_core_update_reservation() {
  $params = json_decode(file_get_contents('php://input'), true);

  $unit = explode(':', $params['unit']);
  $unit_tid = reset(taxonomy_get_term_by_name($unit[0]));

  $query = db_update('webform_submitted_data');
  $tb_columns = array(
    'data' => $params['status']
  );
  $query->fields($tb_columns);
  $query->condition('sid', $params['sid'], '=');
  $query->condition('cid', '14', '=');
  $query->execute();

  $query2 = db_update('field_data_unit_status');
  $tb_columns2 = array(
    'unit_status_value' => $params['status']
  );
  $query2->fields($tb_columns2);
  $query2->condition('bundle', $params['development'], '=');
  $query2->condition('entity_id', $unit_tid->tid, '=');
  $query2->execute();

  if ($params['status'] == 'sold') {
    $text = 'Unit ' . $params['unit'] . ' @ ' . $params['development'] . ' has been sold on ' . date('F d, Y');
  }
  else {
    $text = ucfirst($params['name']) . ' has '. $params['status'] .' your request for reservation of unit ' . $params['unit'] . ' @ ' . ucfirst($params['development']) . ' for ' . ucfirst($params['reserved']);
  }

  $query2 = db_insert('updates');
  $query2->fields(array('text', 'date_created'));
  $query2->values(array($text, date('Y-m-d')));
  $query2->execute();
}

/**
 * Get Updates.
 */
function dmci_core_get_updates() {
  $vid = db_select('updates', 'up')
    ->fields('up', array('text'))
    ->orderBy('id', 'DESC')
    ->range(0, 5)
    ->execute()
    ->fetchAll();
  print_r(json_encode($vid));
}

/**
 * Get All Projects.
 */
function get_projects() {
  $query = db_select('node', 'nd')
    ->fields('nd', array('type', 'title'))
    ->condition('type', 'project', '=')
    ->execute()
    ->fetchAll();

  $project_name = array();
  foreach($query as $project) {
    array_push($project_name, $project->title);
  }

  return $project_name;
}

/**
 * Implementation of hook_webform_select_options_info().
 */
function dmci_core_webform_select_options_info() {
  $items = array();
  $items['units'] = array(
    'title' => t('Units'),
    'options callback' => 'dmci_core_list_units'
  );

  $items['project'] = array(
    'title' => t('Projects'),
    'options callback' => 'dmci_core_list_projects'
  );

  return $items;
}

/**
 * Build an options list to be used with webforms select list based in `project units`.
 */
function dmci_core_list_units() {
  $project_units = array();

  $units = db_select('field_data_unit_status', 'fdus');
  $units->join('taxonomy_term_data', 'ttd', 'fdus.entity_id = ttd.tid');
  $units->fields('fdus', array('bundle', 'unit_status_value', 'entity_id'));
  $units->fields('ttd', array('name'));
  $units->condition('unit_status_value', 'available', '=');

  foreach($units->execute()->fetchAll() as $unit) {
    $project_units[$unit->bundle.':'.$unit->name] = $unit->name;
  }

  return $project_units;
}

/**
 * Build an options list to be used with webforms select list based in `projects`.
 */
function dmci_core_list_projects() {
  $item = array();
  foreach(get_projects() as $project) {
    $item[strtolower(str_replace(" ", "_", $project))] = $project;
  }

  return $item;
}